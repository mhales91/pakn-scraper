name: scrape

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *" # hourly; tweak as you like

jobs:
  scrape:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout
      - uses: actions/checkout@v4

      - name: Setup .NET 6 SDK (and LTS runtime)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x
          cache: false

      - name: Install Playwright CLI
        run: dotnet tool install --global Microsoft.Playwright.CLI

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore & Build
        run: |
          set -euxo pipefail
          dotnet restore src/PakScraper.csproj
          dotnet build src/PakScraper.csproj -c Release

      - name: Install Playwright browsers (Chromium)
        run: playwright install --with-deps chromium

      - name: Ensure xvfb (virtual display)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Run scraper and capture outputs
        run: |
          set -euxo pipefail
          # Run headless with xvfb and capture BOTH json and std streams
          xvfb-run -a -s "-screen 0 1280x720x24" \
            dotnet run --project src/PakScraper.csproj -- headless \
            | tee out.stdout.txt \
            | tee out.json > /dev/null
          # also capture stderr
          true # keep step green even if the next command fails
        shell: bash

      - name: Show file sizes & preview
        if: always()
        run: |
          ls -lah || true
          wc -c out.json out.stdout.txt 2>/dev/null || true
          echo "----- head(out.json) -----" || true
          head -n 50 out.json 2>/dev/null || true
          echo "----- tail(out.json) -----" || true
          tail -n 50 out.json 2>/dev/null || true
          echo "----- head(out.stdout.txt) -----" || true
          head -n 50 out.stdout.txt 2>/dev/null || true
          echo "----- tail(out.stdout.txt) -----" || true
          tail -n 50 out.stdout.txt 2>/dev/null || true

      # OPTIONAL: push to Google Sheets (requires GCP_SA_KEY, SHEET_ID, SHEET_TAB secrets)
      - name: Push parsed rows to Google Sheets
        if: success() || always()   # run and then no-op if no JSON
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          SHEET_ID:   ${{ secrets.SHEET_ID }}
          SHEET_TAB:  ${{ secrets.SHEET_TAB }}
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade pip
          python3 -m pip install google-api-python-client pandas
          python3 - << 'PY'
          import os, json, sys, datetime
          import pandas as pd
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build

          try:
              raw = open("out.json","r",encoding="utf-8").read().strip()
          except FileNotFoundError:
              print("out.json not found", file=sys.stderr); sys.exit(0)

          data = []
          if raw:
              try:
                  j = json.loads(raw); data = j if isinstance(j, list) else [j]
              except json.JSONDecodeError:
                  for line in raw.splitlines():
                      line=line.strip()
                      if not line: continue
                      try: data.append(json.loads(line))
                      except: pass

          if not data:
              print("No JSON records parsed from scraper output.", file=sys.stderr)
              sys.exit(0)

          df = pd.json_normalize(data)
          now = datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z"
          if "ingested_at" not in df.columns:
              df["ingested_at"] = now
          cols = list(df.columns)
          df = df[cols]

          creds = Credentials.from_service_account_info(
              json.loads(os.environ["GCP_SA_KEY"]),
              scopes=["https://www.googleapis.com/auth/spreadsheets"]
          )
          svc = build("sheets","v4",credentials=creds)

          values = [cols] + df.fillna("").astype(str).values.tolist()
          read = svc.spreadsheets().values().get(
              spreadsheetId=os.environ["SHEET_ID"],
              range=f"{os.environ.get('SHEET_TAB','Sheet1')}!A1:A1"
          ).execute()
          if 'values' in read:
              values = values[1:]

          if values:
              svc.spreadsheets().values().append(
                  spreadsheetId=os.environ["SHEET_ID"],
                  range=f"{os.environ.get('SHEET_TAB','Sheet1')}!A1",
                  valueInputOption="RAW",
                  insertDataOption="INSERT_ROWS",
                  body={"values": values}
              ).execute()
              print(f"Appended {len(values)} row(s)")
          PY

      - name: Upload scrape artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scrape-outputs
          path: |
            out.json
            out.stdout.txt
            out.stderr.txt
            **/*.json
          if-no-files-found: warn
          retention-days: 7
